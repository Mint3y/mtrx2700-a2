
a2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000434  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005c8  080005c8  0000202c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005c8  080005c8  0000202c  2**0
                  CONTENTS
  4 .ARM          00000000  080005c8  080005c8  0000202c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005c8  080005c8  0000202c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005c8  080005c8  000015c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080005cc  080005cc  000015cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  080005d0  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000202c  2**0
                  CONTENTS
 10 .bss          00001020  2000002c  2000002c  0000202c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000104c  2000104c  0000202c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000202c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000ded  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000313  00000000  00000000  00002e49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c0  00000000  00000000  00003160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000084  00000000  00000000  00003220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014d7e  00000000  00000000  000032a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000bd9  00000000  00000000  00018022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000728be  00000000  00000000  00018bfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008b4b9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000210  00000000  00000000  0008b4fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  0008b70c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000002c 	.word	0x2000002c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080005b0 	.word	0x080005b0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000030 	.word	0x20000030
 80001d0:	080005b0 	.word	0x080005b0

080001d4 <main>:
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif



int main(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
//    test_serial();
	test_serial_interrupt();
 80001d8:	f000 f98a 	bl	80004f0 <test_serial_interrupt>

    /* Loop forever */
	for(;;);
 80001dc:	bf00      	nop
 80001de:	e7fd      	b.n	80001dc <main+0x8>

080001e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001e0:	b480      	push	{r7}
 80001e2:	b083      	sub	sp, #12
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	4603      	mov	r3, r0
 80001e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	db0b      	blt.n	800020a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	f003 021f 	and.w	r2, r3, #31
 80001f8:	4907      	ldr	r1, [pc, #28]	@ (8000218 <__NVIC_EnableIRQ+0x38>)
 80001fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001fe:	095b      	lsrs	r3, r3, #5
 8000200:	2001      	movs	r0, #1
 8000202:	fa00 f202 	lsl.w	r2, r0, r2
 8000206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800020a:	bf00      	nop
 800020c:	370c      	adds	r7, #12
 800020e:	46bd      	mov	sp, r7
 8000210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000214:	4770      	bx	lr
 8000216:	bf00      	nop
 8000218:	e000e100 	.word	0xe000e100

0800021c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800021c:	b480      	push	{r7}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
 8000222:	4603      	mov	r3, r0
 8000224:	6039      	str	r1, [r7, #0]
 8000226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022c:	2b00      	cmp	r3, #0
 800022e:	db0a      	blt.n	8000246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000230:	683b      	ldr	r3, [r7, #0]
 8000232:	b2da      	uxtb	r2, r3
 8000234:	490c      	ldr	r1, [pc, #48]	@ (8000268 <__NVIC_SetPriority+0x4c>)
 8000236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023a:	0112      	lsls	r2, r2, #4
 800023c:	b2d2      	uxtb	r2, r2
 800023e:	440b      	add	r3, r1
 8000240:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000244:	e00a      	b.n	800025c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	b2da      	uxtb	r2, r3
 800024a:	4908      	ldr	r1, [pc, #32]	@ (800026c <__NVIC_SetPriority+0x50>)
 800024c:	79fb      	ldrb	r3, [r7, #7]
 800024e:	f003 030f 	and.w	r3, r3, #15
 8000252:	3b04      	subs	r3, #4
 8000254:	0112      	lsls	r2, r2, #4
 8000256:	b2d2      	uxtb	r2, r2
 8000258:	440b      	add	r3, r1
 800025a:	761a      	strb	r2, [r3, #24]
}
 800025c:	bf00      	nop
 800025e:	370c      	adds	r7, #12
 8000260:	46bd      	mov	sp, r7
 8000262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000266:	4770      	bx	lr
 8000268:	e000e100 	.word	0xe000e100
 800026c:	e000ed00 	.word	0xe000ed00

08000270 <init_usart>:
static SerialPortBuffer USART1_RECEIVE_BUFFER = {
	{0},
	0
};

void init_usart() {
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
	// Enable clock power, system configuration clock and GPIOC (UARTs)
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000274:	4b08      	ldr	r3, [pc, #32]	@ (8000298 <init_usart+0x28>)
 8000276:	69db      	ldr	r3, [r3, #28]
 8000278:	4a07      	ldr	r2, [pc, #28]	@ (8000298 <init_usart+0x28>)
 800027a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800027e:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000280:	4b05      	ldr	r3, [pc, #20]	@ (8000298 <init_usart+0x28>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	4a04      	ldr	r2, [pc, #16]	@ (8000298 <init_usart+0x28>)
 8000286:	f043 0301 	orr.w	r3, r3, #1
 800028a:	6193      	str	r3, [r2, #24]
}
 800028c:	bf00      	nop
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	40021000 	.word	0x40021000

0800029c <enable_usart1_receive_interrupt>:

void enable_usart1_receive_interrupt() {
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002a0:	b672      	cpsid	i
}
 80002a2:	bf00      	nop
	// Disable all interrupt requests while changing interrupt registers
	__disable_irq();

	// Enable interrupts on USART receive
	USART1->CR1 |= USART_CR1_RXNEIE;
 80002a4:	4b0b      	ldr	r3, [pc, #44]	@ (80002d4 <enable_usart1_receive_interrupt+0x38>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a0a      	ldr	r2, [pc, #40]	@ (80002d4 <enable_usart1_receive_interrupt+0x38>)
 80002aa:	f043 0320 	orr.w	r3, r3, #32
 80002ae:	6013      	str	r3, [r2, #0]

	// Configure interrupt for USART1 (EXTI Line 25)
	// Note: USART Interrupts cannot configure rising/falling edge
	EXTI->IMR |= EXTI_IMR_MR25; // Enable bit for line 25
 80002b0:	4b09      	ldr	r3, [pc, #36]	@ (80002d8 <enable_usart1_receive_interrupt+0x3c>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a08      	ldr	r2, [pc, #32]	@ (80002d8 <enable_usart1_receive_interrupt+0x3c>)
 80002b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80002ba:	6013      	str	r3, [r2, #0]

	// Set priority and enable interrupt requests for USART1 in the NVIC
	NVIC_SetPriority(USART1_IRQn, 1);
 80002bc:	2101      	movs	r1, #1
 80002be:	2025      	movs	r0, #37	@ 0x25
 80002c0:	f7ff ffac 	bl	800021c <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 80002c4:	2025      	movs	r0, #37	@ 0x25
 80002c6:	f7ff ff8b 	bl	80001e0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80002ca:	b662      	cpsie	i
}
 80002cc:	bf00      	nop

	// Re-enable interrupt requests
	__enable_irq();
}
 80002ce:	bf00      	nop
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	40013800 	.word	0x40013800
 80002d8:	40010400 	.word	0x40010400

080002dc <init_serial_port_16bit>:
// completion_function: Function to execute when completing serial output,
//                      takes in the number of bytes sent.
void init_serial_port_16bit(uint32_t baud_rate,
				            SerialPort* serial_port,
					        void (*completion_function)(uint32_t),
							void (*read_complete)(uint8_t*, uint32_t)) {
 80002dc:	b480      	push	{r7}
 80002de:	b087      	sub	sp, #28
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	60f8      	str	r0, [r7, #12]
 80002e4:	60b9      	str	r1, [r7, #8]
 80002e6:	607a      	str	r2, [r7, #4]
 80002e8:	603b      	str	r3, [r7, #0]
	// Enable the GPIO on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	691a      	ldr	r2, [r3, #16]
 80002ee:	4b35      	ldr	r3, [pc, #212]	@ (80003c4 <init_serial_port_16bit+0xe8>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	4934      	ldr	r1, [pc, #208]	@ (80003c4 <init_serial_port_16bit+0xe8>)
 80002f4:	4313      	orrs	r3, r2
 80002f6:	614b      	str	r3, [r1, #20]

	// Set pin Mode, Output Speed and Alternate Function
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 80002f8:	68bb      	ldr	r3, [r7, #8]
 80002fa:	685b      	ldr	r3, [r3, #4]
 80002fc:	68ba      	ldr	r2, [r7, #8]
 80002fe:	6952      	ldr	r2, [r2, #20]
 8000300:	601a      	str	r2, [r3, #0]
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 8000302:	68bb      	ldr	r3, [r7, #8]
 8000304:	685b      	ldr	r3, [r3, #4]
 8000306:	68ba      	ldr	r2, [r7, #8]
 8000308:	6992      	ldr	r2, [r2, #24]
 800030a:	609a      	str	r2, [r3, #8]
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	69d9      	ldr	r1, [r3, #28]
 8000310:	68bb      	ldr	r3, [r7, #8]
 8000312:	685b      	ldr	r3, [r3, #4]
 8000314:	6a1a      	ldr	r2, [r3, #32]
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	685b      	ldr	r3, [r3, #4]
 800031a:	430a      	orrs	r2, r1
 800031c:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 800031e:	68bb      	ldr	r3, [r7, #8]
 8000320:	6a19      	ldr	r1, [r3, #32]
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	685b      	ldr	r3, [r3, #4]
 8000326:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	685b      	ldr	r3, [r3, #4]
 800032c:	430a      	orrs	r2, r1
 800032e:	625a      	str	r2, [r3, #36]	@ 0x24

	// Enable the port
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	68da      	ldr	r2, [r3, #12]
 8000334:	4b23      	ldr	r3, [pc, #140]	@ (80003c4 <init_serial_port_16bit+0xe8>)
 8000336:	69db      	ldr	r3, [r3, #28]
 8000338:	4922      	ldr	r1, [pc, #136]	@ (80003c4 <init_serial_port_16bit+0xe8>)
 800033a:	4313      	orrs	r3, r2
 800033c:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 800033e:	68bb      	ldr	r3, [r7, #8]
 8000340:	689a      	ldr	r2, [r3, #8]
 8000342:	4b20      	ldr	r3, [pc, #128]	@ (80003c4 <init_serial_port_16bit+0xe8>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	491f      	ldr	r1, [pc, #124]	@ (80003c4 <init_serial_port_16bit+0xe8>)
 8000348:	4313      	orrs	r3, r2
 800034a:	618b      	str	r3, [r1, #24]

	// Get associated Baud Rate Register (BBR) (16 bit)
	uint16_t *baud_rate_register = (uint16_t*)&serial_port->UART->BRR;
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	330c      	adds	r3, #12
 8000352:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	// replace with a mathematical function TODO
	switch(baud_rate) {
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	2b04      	cmp	r3, #4
 8000358:	d820      	bhi.n	800039c <init_serial_port_16bit+0xc0>
 800035a:	a201      	add	r2, pc, #4	@ (adr r2, 8000360 <init_serial_port_16bit+0x84>)
 800035c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000360:	08000375 	.word	0x08000375
 8000364:	0800037d 	.word	0x0800037d
 8000368:	08000385 	.word	0x08000385
 800036c:	0800038d 	.word	0x0800038d
 8000370:	08000395 	.word	0x08000395
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_register = 0x46;  // 115200 at 8MHz
 8000374:	697b      	ldr	r3, [r7, #20]
 8000376:	2246      	movs	r2, #70	@ 0x46
 8000378:	801a      	strh	r2, [r3, #0]
		break;
 800037a:	e00f      	b.n	800039c <init_serial_port_16bit+0xc0>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_register = 0x46;  // 115200 at 8MHz
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	2246      	movs	r2, #70	@ 0x46
 8000380:	801a      	strh	r2, [r3, #0]
		break;
 8000382:	e00b      	b.n	800039c <init_serial_port_16bit+0xc0>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_register = 0x46;  // 115200 at 8MHz
 8000384:	697b      	ldr	r3, [r7, #20]
 8000386:	2246      	movs	r2, #70	@ 0x46
 8000388:	801a      	strh	r2, [r3, #0]
		break;
 800038a:	e007      	b.n	800039c <init_serial_port_16bit+0xc0>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_register = 0x46;  // 115200 at 8MHz
 800038c:	697b      	ldr	r3, [r7, #20]
 800038e:	2246      	movs	r2, #70	@ 0x46
 8000390:	801a      	strh	r2, [r3, #0]
		break;
 8000392:	e003      	b.n	800039c <init_serial_port_16bit+0xc0>
	case BAUD_115200:
		*baud_rate_register = 0x46;  // 115200 at 8MHz
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	2246      	movs	r2, #70	@ 0x46
 8000398:	801a      	strh	r2, [r3, #0]
		break;
 800039a:	bf00      	nop
	}

	// Enable transmit, receive and enable
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 800039c:	68bb      	ldr	r3, [r7, #8]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	681a      	ldr	r2, [r3, #0]
 80003a2:	68bb      	ldr	r3, [r7, #8]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	f042 020d 	orr.w	r2, r2, #13
 80003aa:	601a      	str	r2, [r3, #0]

	// Set the completion functions
	serial_port->completion_function = completion_function;
 80003ac:	68bb      	ldr	r3, [r7, #8]
 80003ae:	687a      	ldr	r2, [r7, #4]
 80003b0:	625a      	str	r2, [r3, #36]	@ 0x24
	serial_port->read_complete = read_complete;
 80003b2:	68bb      	ldr	r3, [r7, #8]
 80003b4:	683a      	ldr	r2, [r7, #0]
 80003b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80003b8:	bf00      	nop
 80003ba:	371c      	adds	r7, #28
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr
 80003c4:	40021000 	.word	0x40021000

080003c8 <USART1_EXTI25_IRQHandler>:
	// Activate read completion callback and return the number of bytes read
	serial_port->read_complete(buffer, i);
	return i;
}

void USART1_EXTI25_IRQHandler(void) {
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
	// Clear overrun and frame errors
	USART1_PORT.UART->ICR |= USART_ICR_ORECF | USART_ICR_FECF;
 80003ce:	4b27      	ldr	r3, [pc, #156]	@ (800046c <USART1_EXTI25_IRQHandler+0xa4>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	6a1a      	ldr	r2, [r3, #32]
 80003d4:	4b25      	ldr	r3, [pc, #148]	@ (800046c <USART1_EXTI25_IRQHandler+0xa4>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	f042 020a 	orr.w	r2, r2, #10
 80003dc:	621a      	str	r2, [r3, #32]

	// USART1 buffer is full, ignore read
	if (USART1_RECEIVE_BUFFER.index >= SERIAL_BUFFER_SIZE) {
 80003de:	4b24      	ldr	r3, [pc, #144]	@ (8000470 <USART1_EXTI25_IRQHandler+0xa8>)
 80003e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80003ea:	d23b      	bcs.n	8000464 <USART1_EXTI25_IRQHandler+0x9c>
		return;
	}

	// Read to the USART1 receive buffer
	USART1_RECEIVE_BUFFER.buffer[USART1_RECEIVE_BUFFER.index] = (char)USART1_PORT.UART->RDR;
 80003ec:	4b1f      	ldr	r3, [pc, #124]	@ (800046c <USART1_EXTI25_IRQHandler+0xa4>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80003f2:	b29b      	uxth	r3, r3
 80003f4:	b2db      	uxtb	r3, r3
 80003f6:	461a      	mov	r2, r3
 80003f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000470 <USART1_EXTI25_IRQHandler+0xa8>)
 80003fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4611      	mov	r1, r2
 8000402:	4a1b      	ldr	r2, [pc, #108]	@ (8000470 <USART1_EXTI25_IRQHandler+0xa8>)
 8000404:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	++USART1_RECEIVE_BUFFER.index;
 8000408:	4b19      	ldr	r3, [pc, #100]	@ (8000470 <USART1_EXTI25_IRQHandler+0xa8>)
 800040a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	3301      	adds	r3, #1
 8000412:	4a17      	ldr	r2, [pc, #92]	@ (8000470 <USART1_EXTI25_IRQHandler+0xa8>)
 8000414:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000418:	6013      	str	r3, [r2, #0]
	serial_write_char(USART1_RECEIVE_BUFFER.buffer[USART1_RECEIVE_BUFFER.index - 1], &USART1_PORT);
 800041a:	4b15      	ldr	r3, [pc, #84]	@ (8000470 <USART1_EXTI25_IRQHandler+0xa8>)
 800041c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	3b01      	subs	r3, #1
 8000424:	4a12      	ldr	r2, [pc, #72]	@ (8000470 <USART1_EXTI25_IRQHandler+0xa8>)
 8000426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800042a:	b2db      	uxtb	r3, r3
 800042c:	490f      	ldr	r1, [pc, #60]	@ (800046c <USART1_EXTI25_IRQHandler+0xa4>)
 800042e:	4618      	mov	r0, r3
 8000430:	f000 f820 	bl	8000474 <serial_write_char>

	// Next character is a terminator
	if (USART1_PORT.UART->RDR == SERIAL_TERMINATOR) {
 8000434:	4b0d      	ldr	r3, [pc, #52]	@ (800046c <USART1_EXTI25_IRQHandler+0xa4>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800043a:	b29b      	uxth	r3, r3
 800043c:	2b2a      	cmp	r3, #42	@ 0x2a
 800043e:	d112      	bne.n	8000466 <USART1_EXTI25_IRQHandler+0x9e>
		SerialPortBuffer* buff = &USART1_RECEIVE_BUFFER;
 8000440:	4b0b      	ldr	r3, [pc, #44]	@ (8000470 <USART1_EXTI25_IRQHandler+0xa8>)
 8000442:	607b      	str	r3, [r7, #4]

		// Activate read completion callback
		USART1_PORT.read_complete(USART1_RECEIVE_BUFFER.buffer,
 8000444:	4b09      	ldr	r3, [pc, #36]	@ (800046c <USART1_EXTI25_IRQHandler+0xa4>)
 8000446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000448:	4a09      	ldr	r2, [pc, #36]	@ (8000470 <USART1_EXTI25_IRQHandler+0xa8>)
 800044a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800044e:	6812      	ldr	r2, [r2, #0]
 8000450:	4611      	mov	r1, r2
 8000452:	4807      	ldr	r0, [pc, #28]	@ (8000470 <USART1_EXTI25_IRQHandler+0xa8>)
 8000454:	4798      	blx	r3
								  USART1_RECEIVE_BUFFER.index);
		USART1_RECEIVE_BUFFER.index = 0;
 8000456:	4b06      	ldr	r3, [pc, #24]	@ (8000470 <USART1_EXTI25_IRQHandler+0xa8>)
 8000458:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800045c:	461a      	mov	r2, r3
 800045e:	2300      	movs	r3, #0
 8000460:	6013      	str	r3, [r2, #0]
 8000462:	e000      	b.n	8000466 <USART1_EXTI25_IRQHandler+0x9e>
		return;
 8000464:	bf00      	nop
	}
}
 8000466:	3708      	adds	r7, #8
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	20000000 	.word	0x20000000
 8000470:	20000048 	.word	0x20000048

08000474 <serial_write_char>:

void serial_write_char(char data, SerialPort* serial_port) {
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	6039      	str	r1, [r7, #0]
 800047e:	71fb      	strb	r3, [r7, #7]
	while((serial_port->UART->ISR & USART_ISR_TXE) == 0){}
 8000480:	bf00      	nop
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	69db      	ldr	r3, [r3, #28]
 8000488:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800048c:	2b00      	cmp	r3, #0
 800048e:	d0f8      	beq.n	8000482 <serial_write_char+0xe>

	serial_port->UART->TDR = data;
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	79fa      	ldrb	r2, [r7, #7]
 8000496:	b292      	uxth	r2, r2
 8000498:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 800049a:	bf00      	nop
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr
	...

080004a8 <echo_read_completion>:
		serial_write_char(data[i], serial_port);
	}
}

void echo_read_completion(char* buffer,
						  uint32_t bytes_read) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	6039      	str	r1, [r7, #0]
	serial_write_char((char)bytes_read, &USART1_PORT);
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	490d      	ldr	r1, [pc, #52]	@ (80004ec <echo_read_completion+0x44>)
 80004b8:	4618      	mov	r0, r3
 80004ba:	f7ff ffdb 	bl	8000474 <serial_write_char>
	// Iterate the buffer and write the characters to USART1
	for (int32_t i = 0; i < bytes_read; ++i) {
 80004be:	2300      	movs	r3, #0
 80004c0:	60fb      	str	r3, [r7, #12]
 80004c2:	e00a      	b.n	80004da <echo_read_completion+0x32>
		serial_write_char(buffer[i], &USART1_PORT);
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	687a      	ldr	r2, [r7, #4]
 80004c8:	4413      	add	r3, r2
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	4907      	ldr	r1, [pc, #28]	@ (80004ec <echo_read_completion+0x44>)
 80004ce:	4618      	mov	r0, r3
 80004d0:	f7ff ffd0 	bl	8000474 <serial_write_char>
	for (int32_t i = 0; i < bytes_read; ++i) {
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	3301      	adds	r3, #1
 80004d8:	60fb      	str	r3, [r7, #12]
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	683a      	ldr	r2, [r7, #0]
 80004de:	429a      	cmp	r2, r3
 80004e0:	d8f0      	bhi.n	80004c4 <echo_read_completion+0x1c>
	}
}
 80004e2:	bf00      	nop
 80004e4:	bf00      	nop
 80004e6:	3710      	adds	r7, #16
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	20000000 	.word	0x20000000

080004f0 <test_serial_interrupt>:
												  buffer_size,
												  &USART1_PORT);
	while (1);
}

void test_serial_interrupt() {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	init_usart();
 80004f4:	f7ff febc 	bl	8000270 <init_usart>
	init_serial_port_16bit(BAUD_9600,
 80004f8:	4b04      	ldr	r3, [pc, #16]	@ (800050c <test_serial_interrupt+0x1c>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	4904      	ldr	r1, [pc, #16]	@ (8000510 <test_serial_interrupt+0x20>)
 80004fe:	2000      	movs	r0, #0
 8000500:	f7ff feec 	bl	80002dc <init_serial_port_16bit>
	                       &USART1_PORT,
						   0x00,
						   echo_read_completion);
	enable_usart1_receive_interrupt();
 8000504:	f7ff feca 	bl	800029c <enable_usart1_receive_interrupt>

	while (1);
 8000508:	bf00      	nop
 800050a:	e7fd      	b.n	8000508 <test_serial_interrupt+0x18>
 800050c:	080004a9 	.word	0x080004a9
 8000510:	20000000 	.word	0x20000000

08000514 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000514:	480d      	ldr	r0, [pc, #52]	@ (800054c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000516:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000518:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800051c:	480c      	ldr	r0, [pc, #48]	@ (8000550 <LoopForever+0x6>)
  ldr r1, =_edata
 800051e:	490d      	ldr	r1, [pc, #52]	@ (8000554 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000520:	4a0d      	ldr	r2, [pc, #52]	@ (8000558 <LoopForever+0xe>)
  movs r3, #0
 8000522:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000524:	e002      	b.n	800052c <LoopCopyDataInit>

08000526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800052a:	3304      	adds	r3, #4

0800052c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800052c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800052e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000530:	d3f9      	bcc.n	8000526 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000532:	4a0a      	ldr	r2, [pc, #40]	@ (800055c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000534:	4c0a      	ldr	r4, [pc, #40]	@ (8000560 <LoopForever+0x16>)
  movs r3, #0
 8000536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000538:	e001      	b.n	800053e <LoopFillZerobss>

0800053a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800053a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800053c:	3204      	adds	r2, #4

0800053e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800053e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000540:	d3fb      	bcc.n	800053a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000542:	f000 f811 	bl	8000568 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000546:	f7ff fe45 	bl	80001d4 <main>

0800054a <LoopForever>:

LoopForever:
  b LoopForever
 800054a:	e7fe      	b.n	800054a <LoopForever>
  ldr   r0, =_estack
 800054c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000554:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000558:	080005d0 	.word	0x080005d0
  ldr r2, =_sbss
 800055c:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000560:	2000104c 	.word	0x2000104c

08000564 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000564:	e7fe      	b.n	8000564 <ADC1_2_IRQHandler>
	...

08000568 <__libc_init_array>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	4d0d      	ldr	r5, [pc, #52]	@ (80005a0 <__libc_init_array+0x38>)
 800056c:	4c0d      	ldr	r4, [pc, #52]	@ (80005a4 <__libc_init_array+0x3c>)
 800056e:	1b64      	subs	r4, r4, r5
 8000570:	10a4      	asrs	r4, r4, #2
 8000572:	2600      	movs	r6, #0
 8000574:	42a6      	cmp	r6, r4
 8000576:	d109      	bne.n	800058c <__libc_init_array+0x24>
 8000578:	4d0b      	ldr	r5, [pc, #44]	@ (80005a8 <__libc_init_array+0x40>)
 800057a:	4c0c      	ldr	r4, [pc, #48]	@ (80005ac <__libc_init_array+0x44>)
 800057c:	f000 f818 	bl	80005b0 <_init>
 8000580:	1b64      	subs	r4, r4, r5
 8000582:	10a4      	asrs	r4, r4, #2
 8000584:	2600      	movs	r6, #0
 8000586:	42a6      	cmp	r6, r4
 8000588:	d105      	bne.n	8000596 <__libc_init_array+0x2e>
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000590:	4798      	blx	r3
 8000592:	3601      	adds	r6, #1
 8000594:	e7ee      	b.n	8000574 <__libc_init_array+0xc>
 8000596:	f855 3b04 	ldr.w	r3, [r5], #4
 800059a:	4798      	blx	r3
 800059c:	3601      	adds	r6, #1
 800059e:	e7f2      	b.n	8000586 <__libc_init_array+0x1e>
 80005a0:	080005c8 	.word	0x080005c8
 80005a4:	080005c8 	.word	0x080005c8
 80005a8:	080005c8 	.word	0x080005c8
 80005ac:	080005cc 	.word	0x080005cc

080005b0 <_init>:
 80005b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005b2:	bf00      	nop
 80005b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005b6:	bc08      	pop	{r3}
 80005b8:	469e      	mov	lr, r3
 80005ba:	4770      	bx	lr

080005bc <_fini>:
 80005bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005be:	bf00      	nop
 80005c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005c2:	bc08      	pop	{r3}
 80005c4:	469e      	mov	lr, r3
 80005c6:	4770      	bx	lr
