
a2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000354  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080004e8  080004e8  000014e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000510  08000510  00001518  2**0
                  CONTENTS
  4 .ARM          00000000  08000510  08000510  00001518  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000510  08000518  00001518  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000510  08000510  00001510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000514  08000514  00001514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001518  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001518  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001518  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000635  00000000  00000000  00001548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000024a  00000000  00000000  00001b7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000090  00000000  00000000  00001dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000005f  00000000  00000000  00001e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014d64  00000000  00000000  00001eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000a6a  00000000  00000000  00016c1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000723ae  00000000  00000000  00017685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00089a33  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000164  00000000  00000000  00089a78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  00089bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080004d0 	.word	0x080004d0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080004d0 	.word	0x080004d0

080001d4 <main>:
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif



int main(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	test_serial();
 80001d8:	f000 f8ec 	bl	80003b4 <test_serial>

    /* Loop forever */
	for(;;);
 80001dc:	bf00      	nop
 80001de:	e7fd      	b.n	80001dc <main+0x8>

080001e0 <init_usart>:
#include "serial.h"

void init_usart() {
 80001e0:	b480      	push	{r7}
 80001e2:	af00      	add	r7, sp, #0
	// Enable clock power, system configuration clock and GPIOC (UARTs)
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80001e4:	4b08      	ldr	r3, [pc, #32]	@ (8000208 <init_usart+0x28>)
 80001e6:	69db      	ldr	r3, [r3, #28]
 80001e8:	4a07      	ldr	r2, [pc, #28]	@ (8000208 <init_usart+0x28>)
 80001ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80001ee:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80001f0:	4b05      	ldr	r3, [pc, #20]	@ (8000208 <init_usart+0x28>)
 80001f2:	699b      	ldr	r3, [r3, #24]
 80001f4:	4a04      	ldr	r2, [pc, #16]	@ (8000208 <init_usart+0x28>)
 80001f6:	f043 0301 	orr.w	r3, r3, #1
 80001fa:	6193      	str	r3, [r2, #24]
}
 80001fc:	bf00      	nop
 80001fe:	46bd      	mov	sp, r7
 8000200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	40021000 	.word	0x40021000

0800020c <init_serial_port_16bit>:
// serial_port:         Port register information
// completion_function: Function to execute when completing serial output,
//                      takes in the number of bytes sent.
void init_serial_port_16bit(uint32_t baud_rate,
				            SerialPort* serial_port,
					        void (*completion_function)(uint32_t)) {
 800020c:	b480      	push	{r7}
 800020e:	b087      	sub	sp, #28
 8000210:	af00      	add	r7, sp, #0
 8000212:	60f8      	str	r0, [r7, #12]
 8000214:	60b9      	str	r1, [r7, #8]
 8000216:	607a      	str	r2, [r7, #4]
	// Enable the GPIO on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 8000218:	68bb      	ldr	r3, [r7, #8]
 800021a:	691a      	ldr	r2, [r3, #16]
 800021c:	4b34      	ldr	r3, [pc, #208]	@ (80002f0 <init_serial_port_16bit+0xe4>)
 800021e:	695b      	ldr	r3, [r3, #20]
 8000220:	4933      	ldr	r1, [pc, #204]	@ (80002f0 <init_serial_port_16bit+0xe4>)
 8000222:	4313      	orrs	r3, r2
 8000224:	614b      	str	r3, [r1, #20]

	// Set pin Mode, Output Speed and Alternate Function
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 8000226:	68bb      	ldr	r3, [r7, #8]
 8000228:	685b      	ldr	r3, [r3, #4]
 800022a:	68ba      	ldr	r2, [r7, #8]
 800022c:	6952      	ldr	r2, [r2, #20]
 800022e:	601a      	str	r2, [r3, #0]
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 8000230:	68bb      	ldr	r3, [r7, #8]
 8000232:	685b      	ldr	r3, [r3, #4]
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	6992      	ldr	r2, [r2, #24]
 8000238:	609a      	str	r2, [r3, #8]
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 800023a:	68bb      	ldr	r3, [r7, #8]
 800023c:	69d9      	ldr	r1, [r3, #28]
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	685b      	ldr	r3, [r3, #4]
 8000242:	6a1a      	ldr	r2, [r3, #32]
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	685b      	ldr	r3, [r3, #4]
 8000248:	430a      	orrs	r2, r1
 800024a:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 800024c:	68bb      	ldr	r3, [r7, #8]
 800024e:	6a19      	ldr	r1, [r3, #32]
 8000250:	68bb      	ldr	r3, [r7, #8]
 8000252:	685b      	ldr	r3, [r3, #4]
 8000254:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000256:	68bb      	ldr	r3, [r7, #8]
 8000258:	685b      	ldr	r3, [r3, #4]
 800025a:	430a      	orrs	r2, r1
 800025c:	625a      	str	r2, [r3, #36]	@ 0x24

	// Enable the port
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 800025e:	68bb      	ldr	r3, [r7, #8]
 8000260:	68da      	ldr	r2, [r3, #12]
 8000262:	4b23      	ldr	r3, [pc, #140]	@ (80002f0 <init_serial_port_16bit+0xe4>)
 8000264:	69db      	ldr	r3, [r3, #28]
 8000266:	4922      	ldr	r1, [pc, #136]	@ (80002f0 <init_serial_port_16bit+0xe4>)
 8000268:	4313      	orrs	r3, r2
 800026a:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 800026c:	68bb      	ldr	r3, [r7, #8]
 800026e:	689a      	ldr	r2, [r3, #8]
 8000270:	4b1f      	ldr	r3, [pc, #124]	@ (80002f0 <init_serial_port_16bit+0xe4>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	491e      	ldr	r1, [pc, #120]	@ (80002f0 <init_serial_port_16bit+0xe4>)
 8000276:	4313      	orrs	r3, r2
 8000278:	618b      	str	r3, [r1, #24]

	// Get associated Baud Rate Register (BBR) (16 bit)
	uint16_t *baud_rate_register = (uint16_t*)&serial_port->UART->BRR;
 800027a:	68bb      	ldr	r3, [r7, #8]
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	330c      	adds	r3, #12
 8000280:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	// replace with a mathematical function TODO
	switch(baud_rate) {
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	2b04      	cmp	r3, #4
 8000286:	d821      	bhi.n	80002cc <init_serial_port_16bit+0xc0>
 8000288:	a201      	add	r2, pc, #4	@ (adr r2, 8000290 <init_serial_port_16bit+0x84>)
 800028a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800028e:	bf00      	nop
 8000290:	080002a5 	.word	0x080002a5
 8000294:	080002ad 	.word	0x080002ad
 8000298:	080002b5 	.word	0x080002b5
 800029c:	080002bd 	.word	0x080002bd
 80002a0:	080002c5 	.word	0x080002c5
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_register = 0x46;  // 115200 at 8MHz
 80002a4:	697b      	ldr	r3, [r7, #20]
 80002a6:	2246      	movs	r2, #70	@ 0x46
 80002a8:	801a      	strh	r2, [r3, #0]
		break;
 80002aa:	e00f      	b.n	80002cc <init_serial_port_16bit+0xc0>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_register = 0x46;  // 115200 at 8MHz
 80002ac:	697b      	ldr	r3, [r7, #20]
 80002ae:	2246      	movs	r2, #70	@ 0x46
 80002b0:	801a      	strh	r2, [r3, #0]
		break;
 80002b2:	e00b      	b.n	80002cc <init_serial_port_16bit+0xc0>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_register = 0x46;  // 115200 at 8MHz
 80002b4:	697b      	ldr	r3, [r7, #20]
 80002b6:	2246      	movs	r2, #70	@ 0x46
 80002b8:	801a      	strh	r2, [r3, #0]
		break;
 80002ba:	e007      	b.n	80002cc <init_serial_port_16bit+0xc0>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_register = 0x46;  // 115200 at 8MHz
 80002bc:	697b      	ldr	r3, [r7, #20]
 80002be:	2246      	movs	r2, #70	@ 0x46
 80002c0:	801a      	strh	r2, [r3, #0]
		break;
 80002c2:	e003      	b.n	80002cc <init_serial_port_16bit+0xc0>
	case BAUD_115200:
		*baud_rate_register = 0x46;  // 115200 at 8MHz
 80002c4:	697b      	ldr	r3, [r7, #20]
 80002c6:	2246      	movs	r2, #70	@ 0x46
 80002c8:	801a      	strh	r2, [r3, #0]
		break;
 80002ca:	bf00      	nop
	}

	// Enable transmit, receive and enable
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	68bb      	ldr	r3, [r7, #8]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	f042 020d 	orr.w	r2, r2, #13
 80002da:	601a      	str	r2, [r3, #0]

	serial_port->completion_function = completion_function;
 80002dc:	68bb      	ldr	r3, [r7, #8]
 80002de:	687a      	ldr	r2, [r7, #4]
 80002e0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80002e2:	bf00      	nop
 80002e4:	371c      	adds	r7, #28
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	40021000 	.word	0x40021000

080002f4 <serial_read_until_terminator>:

int serial_read_until_terminator(uint8_t     terminator,
		                         uint8_t*    buffer,
		                         uint32_t    buffer_size,
		                         SerialPort* serial_port) {
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b088      	sub	sp, #32
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	60b9      	str	r1, [r7, #8]
 80002fc:	607a      	str	r2, [r7, #4]
 80002fe:	603b      	str	r3, [r7, #0]
 8000300:	4603      	mov	r3, r0
 8000302:	73fb      	strb	r3, [r7, #15]
	uint8_t read = '\0';
 8000304:	2300      	movs	r3, #0
 8000306:	77fb      	strb	r3, [r7, #31]
	uint32_t i = 0;
 8000308:	2300      	movs	r3, #0
 800030a:	61bb      	str	r3, [r7, #24]
	uint32_t test = 0;
 800030c:	2300      	movs	r3, #0
 800030e:	617b      	str	r3, [r7, #20]

	// Read until terminating character is read or the buffer is full
	while (read != terminator && i < buffer_size) {
 8000310:	e029      	b.n	8000366 <serial_read_until_terminator+0x72>
		// Clear framing and overrun errors until they do not occur
		serial_port->UART->ICR |= USART_ICR_ORECF | USART_ICR_FECF;
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	6a1a      	ldr	r2, [r3, #32]
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	f042 020a 	orr.w	r2, r2, #10
 8000320:	621a      	str	r2, [r3, #32]
		if ((serial_port->UART->ISR & USART_ISR_FE & USART_ISR_ORE) != 0) {
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	69db      	ldr	r3, [r3, #28]
			continue;
		}

		test = serial_port->UART->ISR;
 8000328:	683b      	ldr	r3, [r7, #0]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	69db      	ldr	r3, [r3, #28]
 800032e:	617b      	str	r3, [r7, #20]

		// Wait until the read data register is not empty
		if ((serial_port->UART->ISR & USART_ISR_RXNE) == 0) {
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	69db      	ldr	r3, [r3, #28]
 8000336:	f003 0320 	and.w	r3, r3, #32
 800033a:	2b00      	cmp	r3, #0
 800033c:	d012      	beq.n	8000364 <serial_read_until_terminator+0x70>
			continue;
		}

		// Read to the buffer from the Read Data Register
		read = serial_port->UART->RDR;
 800033e:	683b      	ldr	r3, [r7, #0]
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000344:	b29b      	uxth	r3, r3
 8000346:	77fb      	strb	r3, [r7, #31]
		buffer[i] = read;
 8000348:	68ba      	ldr	r2, [r7, #8]
 800034a:	69bb      	ldr	r3, [r7, #24]
 800034c:	4413      	add	r3, r2
 800034e:	7ffa      	ldrb	r2, [r7, #31]
 8000350:	701a      	strb	r2, [r3, #0]
		++i;
 8000352:	69bb      	ldr	r3, [r7, #24]
 8000354:	3301      	adds	r3, #1
 8000356:	61bb      	str	r3, [r7, #24]

		serial_write_char(read, serial_port);
 8000358:	7ffb      	ldrb	r3, [r7, #31]
 800035a:	6839      	ldr	r1, [r7, #0]
 800035c:	4618      	mov	r0, r3
 800035e:	f000 f80f 	bl	8000380 <serial_write_char>
 8000362:	e000      	b.n	8000366 <serial_read_until_terminator+0x72>
			continue;
 8000364:	bf00      	nop
	while (read != terminator && i < buffer_size) {
 8000366:	7ffa      	ldrb	r2, [r7, #31]
 8000368:	7bfb      	ldrb	r3, [r7, #15]
 800036a:	429a      	cmp	r2, r3
 800036c:	d003      	beq.n	8000376 <serial_read_until_terminator+0x82>
 800036e:	69ba      	ldr	r2, [r7, #24]
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	429a      	cmp	r2, r3
 8000374:	d3cd      	bcc.n	8000312 <serial_read_until_terminator+0x1e>
	}

	return i;
 8000376:	69bb      	ldr	r3, [r7, #24]
}
 8000378:	4618      	mov	r0, r3
 800037a:	3720      	adds	r7, #32
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}

08000380 <serial_write_char>:


void serial_write_char(uint8_t data, SerialPort* serial_port) {
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	4603      	mov	r3, r0
 8000388:	6039      	str	r1, [r7, #0]
 800038a:	71fb      	strb	r3, [r7, #7]
	while((serial_port->UART->ISR & USART_ISR_TXE) == 0){}
 800038c:	bf00      	nop
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	69db      	ldr	r3, [r3, #28]
 8000394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000398:	2b00      	cmp	r3, #0
 800039a:	d0f8      	beq.n	800038e <serial_write_char+0xe>

	serial_port->UART->TDR = data;
 800039c:	683b      	ldr	r3, [r7, #0]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	79fa      	ldrb	r2, [r7, #7]
 80003a2:	b292      	uxth	r2, r2
 80003a4:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 80003a6:	bf00      	nop
 80003a8:	370c      	adds	r7, #12
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
	...

080003b4 <test_serial>:

	// check for NULL
	serial_port->completion_function(counter);
}

void test_serial() {
 80003b4:	b5b0      	push	{r4, r5, r7, lr}
 80003b6:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 80003ba:	af00      	add	r7, sp, #0
	SerialPort USART1_PORT = {
 80003bc:	4b18      	ldr	r3, [pc, #96]	@ (8000420 <test_serial+0x6c>)
 80003be:	f507 74fc 	add.w	r4, r7, #504	@ 0x1f8
 80003c2:	461d      	mov	r5, r3
 80003c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003cc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80003d0:	e884 0003 	stmia.w	r4, {r0, r1}
		0x770000, // AF on external pins
		0x00,     // AF on external pins
		0x00      // Default function pointer
	};

	uint8_t buffer[500] = {0};
 80003d4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80003d8:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
 80003e0:	3304      	adds	r3, #4
 80003e2:	f44f 72f8 	mov.w	r2, #496	@ 0x1f0
 80003e6:	2100      	movs	r1, #0
 80003e8:	4618      	mov	r0, r3
 80003ea:	f000 f844 	bl	8000476 <memset>
	uint32_t buffer_size = 500;
 80003ee:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80003f2:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224

	init_usart();
 80003f6:	f7ff fef3 	bl	80001e0 <init_usart>
	init_serial_port_16bit(BAUD_9600,
 80003fa:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80003fe:	2200      	movs	r2, #0
 8000400:	4619      	mov	r1, r3
 8000402:	2000      	movs	r0, #0
 8000404:	f7ff ff02 	bl	800020c <init_serial_port_16bit>
						   &USART1_PORT,
						   0x00);
	int read_bytes = serial_read_until_terminator('*',
 8000408:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800040c:	1d39      	adds	r1, r7, #4
 800040e:	f8d7 2224 	ldr.w	r2, [r7, #548]	@ 0x224
 8000412:	202a      	movs	r0, #42	@ 0x2a
 8000414:	f7ff ff6e 	bl	80002f4 <serial_read_until_terminator>
 8000418:	f8c7 0220 	str.w	r0, [r7, #544]	@ 0x220
								                  buffer,
												  buffer_size,
												  &USART1_PORT);
	while (1);
 800041c:	bf00      	nop
 800041e:	e7fd      	b.n	800041c <test_serial+0x68>
 8000420:	080004e8 	.word	0x080004e8

08000424 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000424:	480d      	ldr	r0, [pc, #52]	@ (800045c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000426:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000428:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800042c:	480c      	ldr	r0, [pc, #48]	@ (8000460 <LoopForever+0x6>)
  ldr r1, =_edata
 800042e:	490d      	ldr	r1, [pc, #52]	@ (8000464 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000430:	4a0d      	ldr	r2, [pc, #52]	@ (8000468 <LoopForever+0xe>)
  movs r3, #0
 8000432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000434:	e002      	b.n	800043c <LoopCopyDataInit>

08000436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800043a:	3304      	adds	r3, #4

0800043c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800043c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800043e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000440:	d3f9      	bcc.n	8000436 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000442:	4a0a      	ldr	r2, [pc, #40]	@ (800046c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000444:	4c0a      	ldr	r4, [pc, #40]	@ (8000470 <LoopForever+0x16>)
  movs r3, #0
 8000446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000448:	e001      	b.n	800044e <LoopFillZerobss>

0800044a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800044a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800044c:	3204      	adds	r2, #4

0800044e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800044e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000450:	d3fb      	bcc.n	800044a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000452:	f000 f819 	bl	8000488 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000456:	f7ff febd 	bl	80001d4 <main>

0800045a <LoopForever>:

LoopForever:
  b LoopForever
 800045a:	e7fe      	b.n	800045a <LoopForever>
  ldr   r0, =_estack
 800045c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000464:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000468:	08000518 	.word	0x08000518
  ldr r2, =_sbss
 800046c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000470:	2000001c 	.word	0x2000001c

08000474 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000474:	e7fe      	b.n	8000474 <ADC1_2_IRQHandler>

08000476 <memset>:
 8000476:	4402      	add	r2, r0
 8000478:	4603      	mov	r3, r0
 800047a:	4293      	cmp	r3, r2
 800047c:	d100      	bne.n	8000480 <memset+0xa>
 800047e:	4770      	bx	lr
 8000480:	f803 1b01 	strb.w	r1, [r3], #1
 8000484:	e7f9      	b.n	800047a <memset+0x4>
	...

08000488 <__libc_init_array>:
 8000488:	b570      	push	{r4, r5, r6, lr}
 800048a:	4d0d      	ldr	r5, [pc, #52]	@ (80004c0 <__libc_init_array+0x38>)
 800048c:	4c0d      	ldr	r4, [pc, #52]	@ (80004c4 <__libc_init_array+0x3c>)
 800048e:	1b64      	subs	r4, r4, r5
 8000490:	10a4      	asrs	r4, r4, #2
 8000492:	2600      	movs	r6, #0
 8000494:	42a6      	cmp	r6, r4
 8000496:	d109      	bne.n	80004ac <__libc_init_array+0x24>
 8000498:	4d0b      	ldr	r5, [pc, #44]	@ (80004c8 <__libc_init_array+0x40>)
 800049a:	4c0c      	ldr	r4, [pc, #48]	@ (80004cc <__libc_init_array+0x44>)
 800049c:	f000 f818 	bl	80004d0 <_init>
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	10a4      	asrs	r4, r4, #2
 80004a4:	2600      	movs	r6, #0
 80004a6:	42a6      	cmp	r6, r4
 80004a8:	d105      	bne.n	80004b6 <__libc_init_array+0x2e>
 80004aa:	bd70      	pop	{r4, r5, r6, pc}
 80004ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80004b0:	4798      	blx	r3
 80004b2:	3601      	adds	r6, #1
 80004b4:	e7ee      	b.n	8000494 <__libc_init_array+0xc>
 80004b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ba:	4798      	blx	r3
 80004bc:	3601      	adds	r6, #1
 80004be:	e7f2      	b.n	80004a6 <__libc_init_array+0x1e>
 80004c0:	08000510 	.word	0x08000510
 80004c4:	08000510 	.word	0x08000510
 80004c8:	08000510 	.word	0x08000510
 80004cc:	08000514 	.word	0x08000514

080004d0 <_init>:
 80004d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004d2:	bf00      	nop
 80004d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004d6:	bc08      	pop	{r3}
 80004d8:	469e      	mov	lr, r3
 80004da:	4770      	bx	lr

080004dc <_fini>:
 80004dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004de:	bf00      	nop
 80004e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004e2:	bc08      	pop	{r3}
 80004e4:	469e      	mov	lr, r3
 80004e6:	4770      	bx	lr
